#配置数据源，给数据源起名称
spring.shardingsphere.datasource.names=m1
#让一个实体类对应两张表
spring.main.allow-bean-definition-overriding=true

#配置数据源具体内容，包括连接池、驱动、地址用户名和密码、
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
 # 数据库连接池类名称
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
# 数据库驱动类名
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/course_db?serverTimezone=GMT%2B8
 # 数据库 URL 连接
spring.shardingsphere.datasource.m1.username=root
 # 数据库用户名
spring.shardingsphere.datasource.m1.password=12345678
spring.shardingsphere.sharding.tables.course.actual-data-nodes=m1.course_$->{1..2}
spring.shardingsphere.sharding.tables.course.key-generator.column=cid
spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{cid %2 +1}
 # 数据库密码
#spring.shardingsphere.datasource.m1.xxx=
# # 数据库连接池的其它属性
#spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.m1.
#指定course表分布情况，

# 标准分片表配置
#spring.shardingsphere.rules.sharding.tables.course.actual-data-nodes=m1.course_$->{1..2}
# 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况

# 指定course主键生成的规则 SNOWFLAKE
#spring.shardingsphere.sharding.tables.course.key-generator.column=cid
#spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE

#分配的策略
# 分布式序列策略配置
# 分布式序列列名称
#spring.shardingsphere.rules.sharding.tables.course.key-generate-strategy.column=cid
# 分布式序列算法名称
#spring.shardingsphere.rules.sharding.tables.course.key-generate-strategy.key-generator-name=course_$->{cid %2 +1}

#打开sql语句的输出
spring.shardingsphere.props.sql.show=true